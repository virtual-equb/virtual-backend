<?php

namespace App\Services;

use Exception;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Http;

class ApplyFabricTokenService
{
    protected $BASE_URL;
    protected $fabricAppId;
    protected $appSecret;
    protected $merchantAppId;

    public function __construct($BASE_URL, $fabricAppId, $appSecret, $merchantAppId)
    {
        $this->BASE_URL = $BASE_URL;
        $this->fabricAppId = $fabricAppId;
        $this->appSecret = $appSecret;
        $this->merchantAppId = $merchantAppId;
    }

    /**
     * Apply fabric token generated by et-server
     *
     * @return string authToken
     */
    // public function applyFabricToken()
    // {
    //     try {
    //         $response = Http::withHeaders([
    //             "Content-Type" => "application/json",
    //             "X-APP-Key" => $this->fabricAppId,
    //         ])->timeout(60)->post($this->BASE_URL . '/payment/v1/token', [
    //             'appSecret' => $this->appSecret,
    //         ]);
    //         if ($response->successful()) {
    //             return $response->body(); // or $response->json() if you need an array
    //         }
    //         Log::error("Failed to retrieve Fabric token", ['status' => $response->status(), 
    //             'body' => $response->body()
    //         ]);

    //         // Handle errors
    //         throw new \Exception('Error retrieving the Fabric token: ' . $response->status());
    //     } catch (Exception $e) {
    //         Log::error('Exception in applyFabricToken', ['error' => $e->getMessage()]);
    //         throw new \Exception('Error retrieving the Fabric token: ' . $e);
    //     }
    // }
    public function applyFabricToken()
    {
        try {
            $response = Http::retry(5, 2000) // Retry 5 times with 2 seconds between retries
                ->withHeaders([
                    "Content-Type" => "application/json",
                    "X-APP-Key" => $this->fabricAppId,
                ])
                ->timeout(60) // Allow up to 60 seconds for a response
                ->post($this->BASE_URL . '/payment/v1/token', [
                    'appSecret' => $this->appSecret,
                ]);

            if ($response->successful()) {
                return $response->body();
            }

            Log::error('Failed to retrieve Fabric token', [
                'status' => $response->status(),
                'body' => $response->body(),
            ]);
            throw new \Exception('Error retrieving the Fabric token: ' . $response->status());
        } catch (Exception $e) {
            Log::error('Exception in applyFabricToken', ['error' => $e->getMessage()]);
            throw new \Exception('Error retrieving the Fabric token: ' . $e->getMessage());
        }
    }

}
